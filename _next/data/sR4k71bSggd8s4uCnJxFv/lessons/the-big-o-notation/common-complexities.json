{"pageProps":{"post":{"attributes":{"title":"Common Algorithmic Complexities","description":"The introduction to this course."},"html":"<h2 id=\"algorithmic-complexity\">Algorithmic Complexity</h2>\n<p>Here is the list of common complexities</p>\n<ol>\n<li>Linear - O(n)</li>\n<li>Quadratic - O(n<sup>2</sup>)</li>\n<li>Constant - O(1)</li>\n<li>Exponential - O(log n)</li>\n</ol>\n<h2 id=\"linear---on\">Linear - O(n)</h2>\n<p>In Linear algorithmic complexity with increase in number of inputs, space/time taken will grow linearly.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt;= n; i++) {\n  <span class=\"hljs-comment\">// do something</span>\n}\n</code></pre>\n<h2 id=\"quadratic---on2\">Quadratic - O(n<sup>2</sup>)</h2>\n<p>In Quadratic algorithmic complexity time and space taken squares with each increase in the number of inputs.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt;= n; i++) {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &lt;= n; j++) {\n    <span class=\"hljs-comment\">// do something</span>\n  }\n}\n</code></pre>\n<h2 id=\"constant---o1\">Constant - O(1)</h2>\n<p>In Constant algorithmic complexity no matter what the input size is, time and space always remain the same.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> names = [<span class=\"hljs-string\">&quot;John Doe&quot;</span>, <span class=\"hljs-string\">&quot;Jane Doe&quot;</span>, <span class=\"hljs-string\">&quot;Alex&quot;</span>];\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(name[<span class=\"hljs-number\">0</span>]);\n</code></pre>\n<h2 id=\"exponential---olog-n\">Exponential - O(log n)</h2>\n<p>In Exponential algorithmic complexity with increase in number of inputs there is exponential growth in time or space.</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fibonacci</span>(<span class=\"hljs-params\">n</span>) {\n  <span class=\"hljs-keyword\">if</span> (n &lt;= <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> n;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fibonacci</span>(n - <span class=\"hljs-number\">2</span>) + <span class=\"hljs-title function_\">fibonacci</span>(n - <span class=\"hljs-number\">1</span>);\n}\n</code></pre>\n<p><img src=\"/dsa/./images/comparison.png\" alt=\"comparison of different time complexities\"></p>\n","slug":"common-complexities","title":"Common Algorithmic Complexities","section":"The Big O Notation","icon":"info-circle","filePath":"/home/runner/work/dsa/dsa/lessons/01-the-big-o-notation/D-common-complexities.md","nextSlug":"/dsa/lessons/data-structures/intro","prevSlug":"/dsa/lessons/the-big-o-notation/measuring-algorithmic-complexity"}},"__N_SSG":true}