{"pageProps":{"post":{"attributes":{"title":"What is Binary Search?","description":"Introduction to Binary Search Algorithm."},"html":"<h1 id=\"binary-search-algorithm-explanation\">Binary Search Algorithm explanation.</h1>\n<p>In computer science, binary search, also known as half-interval search, logarithmic search, or binary chop, is a search algorithm that finds the position of a target value within a sorted array. Binary search compares the target value to the middle element of the array; if they are unequal, the half in which the target cannot lie is eliminated and the search continues on the remaining half until it is successful. If the search ends with the remaining half being empty, the target is not in the array.</p>\n<h2 id=\"time-complexity\">Time Complexity</h2>\n<p><code>O(log(n))</code> - Since we split search area by two for every next iteration.</p>\n<h2 id=\"space-complexity\">Space Complexity</h2>\n<h2 id=\"implementation\">Implementation</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">bs_list</span>(<span class=\"hljs-params\">haystack: <span class=\"hljs-built_in\">number</span>[], needle: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">boolean</span> {\n  <span class=\"hljs-keyword\">let</span> lo = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">let</span> hi = haystack.<span class=\"hljs-property\">length</span>;\n\n  <span class=\"hljs-keyword\">do</span> {\n    <span class=\"hljs-keyword\">const</span> m = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(lo + (hi - lo) / <span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-keyword\">const</span> v = haystack[m];\n\n    <span class=\"hljs-keyword\">if</span> (v === needle) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (v &gt; needle) {\n      hi = m;\n    } <span class=\"hljs-keyword\">else</span> {\n      lo = m + <span class=\"hljs-number\">1</span>;\n    }\n  } <span class=\"hljs-keyword\">while</span> (lo &lt; hi);\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n</code></pre>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">binarySearchRecursive</span>(<span class=\"hljs-params\">\n  array: <span class=\"hljs-built_in\">number</span>[],\n  x: <span class=\"hljs-built_in\">number</span>,\n  left: <span class=\"hljs-built_in\">number</span>,\n  right: <span class=\"hljs-built_in\">number</span>\n</span>): <span class=\"hljs-built_in\">boolean</span> {\n  <span class=\"hljs-keyword\">if</span> (left &gt; right) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n  mid = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(left + (right - left) / <span class=\"hljs-number\">2</span>);\n\n  <span class=\"hljs-keyword\">if</span> (array[mid] == x) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x &lt; array[mid]) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">binarySearchRecursive</span>(array, x, left, mid - <span class=\"hljs-number\">1</span>);\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">binarySearchRecursive</span>(array, x, mid + <span class=\"hljs-number\">1</span>, right);\n  }\n}\n</code></pre>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">binarySearchIterative</span>(<span class=\"hljs-params\">\n  array: <span class=\"hljs-built_in\">number</span>[],\n  x: <span class=\"hljs-built_in\">number</span>\n</span>): <span class=\"hljs-built_in\">boolean</span> {\n  left = <span class=\"hljs-number\">0</span>;\n  right = array.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>;\n\n  <span class=\"hljs-keyword\">while</span> (left &lt;= right) {\n    mid = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">floor</span>(left + (right - left) / <span class=\"hljs-number\">2</span>);\n\n    <span class=\"hljs-keyword\">if</span> (array[mid] == x) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (x &lt; array[mid]) {\n      right = mid - <span class=\"hljs-number\">1</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      left = mid + <span class=\"hljs-number\">1</span>;\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n</code></pre>\n","slug":"binary-search","title":"What is Binary Search?","section":"Algorithms","icon":"file-code","filePath":"/home/runner/work/dsa/dsa/lessons/03-algorithms/B-binary-search.md","nextSlug":"/dsa/lessons/algorithms/quick-sort","prevSlug":"/dsa/lessons/algorithms/linear-search"}},"__N_SSG":true}